/*
 * CVSGrab
 * Author: Ludovic Claude (ludovicc@users.sourceforge.net)
 * Distributable under LGPL license.
 * See terms of license at gnu.org.
 */
package net.sourceforge.cvsgrab;

import org.xml.sax.*;

/**
 * Parses the html pages generated by ViewCVS and extracts from them the
 * directory structure and the files to download.
 *
 * @author Ludovic Claude
 * @created April 16, 2002
 * @version 1.0
 */

public class CVSGrabHandler implements ContentHandler {

    private boolean inTable = false;
    private boolean inTableHeader = false;
    private boolean fullyLoaded = false;
    private RemoteRepository remoteRepository;
    private RemoteDirectory currentRemoteDirectory;

    /**
     * Constructor for the CVSGrabHandler object
     *
     * @param remoteRepository The remote repository to access
     */
    public CVSGrabHandler(RemoteRepository remoteRepository) {
        this.remoteRepository = remoteRepository;
    }

    /**
     * Returns true if the page was fully loaded
     *
     * @return a boolean value
     */
    public boolean isPageFullyLoaded() {
        return fullyLoaded;
    }

    /**
     * Sets the current remote directory
     *
     * @param currentRemoteDirectory The new currentRemoteDirectory value
     */
    public void setCurrentRemoteDirectory(RemoteDirectory currentRemoteDirectory) {
        this.currentRemoteDirectory = currentRemoteDirectory;
    }

    /**
     * Sets the document locator
     *
     * @param locator The new documentLocator value
     */
    public void setDocumentLocator(org.xml.sax.Locator locator) { }

    /**
     * Reads the text characters
     *
     * @param values The characters
     * @param param Description of the Parameter
     * @param param2 Description of the Parameter
     */
    public void characters(char[] values, int param, int param2) { }

    /**
     * End of the document
     */
    public void endDocument() { }

    /**
     * End of the element
     *
     * @param str Description of the Parameter
     * @param tag The html tag
     * @param str2 Description of the Parameter
     */
    public void endElement(String str, String tag, String str2) {
        tag = tag.toUpperCase();
        if ("TABLE".equals(tag)) {
            inTable = false;
        } else if (inTable && "TH".equals(tag)) {
            inTableHeader = false;
        } else if ("HTML".equals(tag)) {
            fullyLoaded = true;
        }
    }

    /**
     * End of prefix mapping
     *
     * @param str Description of the Parameter
     */
    public void endPrefixMapping(String str) { }

    /**
     * White spaces
     *
     * @param values Description of the Parameter
     * @param param Description of the Parameter
     * @param param2 Description of the Parameter
     */
    public void ignorableWhitespace(char[] values, int param, int param2) { }

    /**
     * Processing instruction
     *
     * @param str Description of the Parameter
     * @param str1 Description of the Parameter
     */
    public void processingInstruction(String str, String str1) { }

    /**
     * Skipped entity
     *
     * @param str Description of the Parameter
     */
    public void skippedEntity(String str) { }

    /**
     * Start of the document
     */
    public void startDocument() { }

    /**
     * Start of the element. Detects the HTML tags, the TABLE and TH tags, and
     * the A HREF tags
     *
     * @param str Description of the Parameter
     * @param tag The html tag
     * @param str2 Description of the Parameter
     * @param attributes Description of the Parameter
     */
    public void startElement(String str, String tag, String str2, org.xml.sax.Attributes attributes) {
        tag = tag.toUpperCase();
        if ("HTML".equals(tag)) {
            // Start of HTML tag marks the begining of the document
            fullyLoaded = false;
        } else if ("TABLE".equals(tag)) {
            // Start of the TABLE marks the area where the files are displayed, or some advertisement or other uninsteresting stuff...
            inTable = true;
        } else if (inTable && "TH".equals(tag)) {
            // Start of TH marks the area for navigation and sorting links
            inTableHeader = true;
        } else if (inTable && !inTableHeader) {
            // If we are in a table and outside its header, then we may be reading some interesting stuff...
            findLinks(tag, attributes);
        }
    }

    /**
     * Start the prefix mapping
     *
     * @param str Description of the Parameter
     * @param str1 Description of the Parameter
     */
    public void startPrefixMapping(String str, String str1) { }

    /**
     * Find the links in the current token
     *
     * @param token The html tag
     * @param attr The tag attributes
     */
    void findLinks(String token, Attributes attr) {
        if (token.toUpperCase().equals("A")) {
            String uri = attr.getValue("href");
            // Skip unwanted links
            if (uri == null || uri.startsWith("http:") || uri.indexOf("Attic") >= 0 || uri.startsWith("CVSROOT")) {
                return;
            }
            // Remove tag information
            if (uri.indexOf("?only_with_tag=") > 0) {
                uri = uri.substring(0, uri.indexOf("?only_with_tag="));
            }
            if (uri.endsWith("/") && uri.length() > 1 && !uri.equals("./")) {
                // Detects and process directories
                remoteRepository.registerDirectoryToProcess(currentRemoteDirectory.getUri() + uri);
            } else if (uri.indexOf("rev=") > 0) {
                // Detects the files to update and their version
                remoteRepository.grabFile(currentRemoteDirectory, uri);
            }
        }
    }
}
